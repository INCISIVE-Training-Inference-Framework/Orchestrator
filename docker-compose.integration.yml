version: "3"
name: orchestrator
services:
  orchestrator:
    image: ${DOCKER_REGISTRY}/orchestrator:${ORCHESTRATOR_TAG}
    build:
      context: .
      tags:
        - ${DOCKER_REGISTRY}/orchestrator:${ORCHESTRATOR_TAG}
        - ${DOCKER_REGISTRY}/orchestrator:latest
    hostname: ${ORCHESTRATOR_HOSTNAME}
    container_name: ${ORCHESTRATOR_HOSTNAME}
    environment:
      TZ: Europe/Madrid
      DEBUG: ${DEBUG}
      MEDIA_ROOT: ${MEDIA_ROOT:-/usr/application/storage/files}
      MEDIA_URL: ${MEDIA_URL:-/usr/application/storage/files}
      MAAS_API_HOSTNAME: ${MAAS_API_HOSTNAME}
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
      ORCHESTRATOR_API_HOSTNAME: ${ORCHESTRATOR_HOSTNAME}:${ORCHESTRATOR_PORT}
      #VALID_DATA_PARTNERS: ${VALID_DATA_PARTNERS}
      #VALID_AI_ENGINE_FUNCTIONALITIES: ${VALID_AI_ENGINE_FUNCTIONALITIES}
      VALIDATE_WITH_MAAS: ${VALIDATE_WITH_MAAS}
      PLATFORM_CENTRAL_NODE_LABEL_KEY: ${PLATFORM_CENTRAL_NODE_LABEL_KEY}
      PLATFORM_CENTRAL_NODE_LABEL_VALUE: ${PLATFORM_CENTRAL_NODE_LABEL_VALUE}
      ARGO_WORKFLOWS_NAMESPACE: ${ARGO_WORKFLOWS_NAMESPACE}
      COMMUNICATION_ADAPTER: ${COMMUNICATION_ADAPTER}
    # Mount paths for sqlite db and orchestration init script
    volumes:
      - ${STORAGE_LOCAL_PATH}:/usr/application/storage
      - ./docker_compose_init_orchestrator.sh:/usr/application/init_orchestrator.sh
    # Command overwrite to initialize the local db
    command:
      - /usr/application/init_orchestrator.sh
      #- sleep
      #- infinity

    networks:
      incisive:
  
  # alpine for debugging purposes
  alpine:
    image: alpine/curl:latest
    hostname: alpine
    container_name: alpine
    environment:
      TZ: Europe/Madrid
    command:
      - sleep
      - infinity
    volumes:
      - '${ORCHESTRATOR_SCRIPTS}:/orchestrator_scripts'
    networks:
      incisive:

networks:
  incisive:
    name: incisive
    driver: bridge
