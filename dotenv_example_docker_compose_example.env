# Docker compose environment variables sample
# ============================================
# - Update values and rename this file to '.env' so docker compose automatically loads these environment variables and uses them when composing the services configs
# - You can also keep the file as it is and include it from the CLI:
# docker compose -f docker-compose.integration.yml --env-file dotenv_docker_compose_example.env config/up/down

# Docker image registry and tag
DOCKER_REGISTRY=your-own-registry
ORCHESTRATOR_HOSTNAME=orchestrator
ORCHESTRATOR_PORT=8000
ORCHESTRATOR_TAG="development"
# Debug purposes: this path will be mounted inside the alpine/curl container to test usage scripts
ORCHESTRATOR_SCRIPTS="/path/to/incisive_platform_populated_usage_scripts/orchestrator_usage_scripts"
# Storage: mandatory path to mount so the sqlite db can be initialized and locally stored
STORAGE_LOCAL_PATH="/path/to/incisive_platform_orchestrator/storage"
WORKDIR="/usr/application"

DEBUG=true
MEDIA_ROOT="${WORKDIR}/storage/files"
MEDIA_URL="${WORKDIR}/storage/files"
MAAS_API_HOSTNAME="maas:8000"
ALLOWED_HOSTS=127.0.0.1,${ORCHESTRATOR_HOSTNAME}
VALID_DATA_PARTNERS="uns,uns-rm2,auth,auth-rm2,uoa,uoa-rm2"
VALID_AI_ENGINE_FUNCTIONALITIES=
VALIDATE_WITH_MAAS=false
PLATFORM_CENTRAL_NODE_LABEL_KEY=fakeCloudNode
PLATFORM_CENTRAL_NODE_LABEL_VALUE=fakeCloudNode
ARGO_WORKFLOWS_NAMESPACE=argo
COMMUNICATION_ADAPTER=kafka

# Swagger
SWAGGER_PORT=8080
